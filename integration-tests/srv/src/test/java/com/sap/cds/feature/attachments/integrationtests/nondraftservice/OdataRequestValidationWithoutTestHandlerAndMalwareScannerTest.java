package com.sap.cds.feature.attachments.integrationtests.nondraftservice;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.concurrent.TimeUnit;

import org.awaitility.Awaitility;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.maciejwalkowiak.wiremock.spring.ConfigureWireMock;
import com.maciejwalkowiak.wiremock.spring.EnableWireMock;
import com.maciejwalkowiak.wiremock.spring.InjectWireMock;
import com.sap.cds.feature.attachments.generated.integration.test.cds4j.sap.attachments.Attachments;
import com.sap.cds.feature.attachments.integrationtests.common.MalwareScanResultProvider;
import com.sap.cds.feature.attachments.integrationtests.constants.Profiles;

@ActiveProfiles(profiles = {Profiles.TEST_HANDLER_DISABLED, Profiles.MALWARE_SCAN_ENABLED})
@EnableWireMock({@ConfigureWireMock(port = 1111, name = "malware-scanner")})
class OdataRequestValidationWithoutTestHandlerAndMalwareScannerTest extends OdataRequestValidationWithoutTestHandlerAndWithoutMalwareScannerTest {

	@InjectWireMock("malware-scanner")
	private WireMockServer wiremock;

	@Autowired
	private MalwareScanResultProvider malwareScanResultProvider;

	@BeforeEach
	void setup() {
		mockMalwareScanResult(false);
	}

	@Override
	@AfterEach
	void teardown() {
		super.teardown();
		wiremock.resetAll();
	}

	@Test
	void scannerReturnedMalwareContentCanNotBeRead() throws Exception {
		wiremock.resetAll();
		mockMalwareScanResult(true);

		var serviceRoot = buildServiceRootWithDeepData();
		postServiceRoot(serviceRoot);

		var selectedRoot = selectStoredRootWithDeepData();
		var item = getItemWithAttachment(selectedRoot);
		var itemAttachment = getRandomItemAttachment(item);
		putContentForAttachmentWithNavigation(selectedRoot, itemAttachment);
		clearServiceHandlerContext();
		var selectedItemAfterChange = selectItem(item);
		var itemAttachmentAfterChange = getRandomItemAttachment(selectedItemAfterChange);

		var url = buildNavigationAttachmentUrl(selectedRoot.getId(), item.getId(), itemAttachment.getId());
		var contentUrl = url + "/content";
		waitAndVerifyContentErrorResponse(contentUrl, itemAttachmentAfterChange);
		clearServiceHandlerContext();
		verifyAttachmentGetResponse(url, itemAttachmentAfterChange);
	}

	@Test
	void scannerReturnedErrorContentCanNotBeRead() throws Exception {
		wiremock.resetAll();
		wiremock.stubFor(post(urlEqualTo("/scan")).withBasicAuth("test-user", "test-password")
				.willReturn(aResponse().withStatus(500)));

		var serviceRoot = buildServiceRootWithDeepData();
		postServiceRoot(serviceRoot);

		var selectedRoot = selectStoredRootWithDeepData();
		var item = getItemWithAttachment(selectedRoot);
		var itemAttachment = getRandomItemAttachment(item);
		putContentForAttachmentWithNavigation(selectedRoot, itemAttachment);
		clearServiceHandlerContext();
		var selectedItemAfterChange = selectItem(item);
		var itemAttachmentAfterChange = getRandomItemAttachment(selectedItemAfterChange);

		var url = buildNavigationAttachmentUrl(selectedRoot.getId(), item.getId(), itemAttachment.getId());
		var contentUrl = url + "/content";
		waitAndVerifyContentErrorResponse(contentUrl, itemAttachmentAfterChange);
		clearServiceHandlerContext();
		verifyAttachmentGetResponse(url, itemAttachmentAfterChange);
	}

	private void mockMalwareScanResult(boolean malware) {
		wiremock.stubFor(post(urlEqualTo("/scan")).withBasicAuth("test-user", "test-password")
				.willReturn(aResponse().withBody(malwareScanResultProvider.buildMalwareScanResult(malware)).withStatus(200)));
	}

	private void waitAndVerifyContentErrorResponse(String contentUrl,
			Attachments itemAttachmentAfterChange) throws Exception {
		Awaitility.await().atMost(10, TimeUnit.SECONDS).until(() -> {
			var response = requestHelper.executeGet(contentUrl);
			assertThat(response.getResponse().getStatus()).isEqualTo(HttpStatus.METHOD_NOT_ALLOWED.value());
			return response.getResponse().getContentAsString().contains("Error text for not clean");
		});
		clearServiceHandlerContext();

		var response = requestHelper.executeGet(contentUrl);
		assertThat(response.getResponse().getStatus()).isEqualTo(HttpStatus.METHOD_NOT_ALLOWED.value());
		assertThat(response.getResponse().getContentAsString()).contains("Error text for not clean");
		verifySingleReadEvent(itemAttachmentAfterChange.getContentId());
	}

	private void verifyAttachmentGetResponse(String url, Attachments itemAttachmentAfterChange) throws Exception {
		var response = requestHelper.executeGet(url);
		assertThat(response.getResponse().getStatus()).isEqualTo(HttpStatus.OK.value());
		verifySingleReadEvent(itemAttachmentAfterChange.getContentId());
	}

}
