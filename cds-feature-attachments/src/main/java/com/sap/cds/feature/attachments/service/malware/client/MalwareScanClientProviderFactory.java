/**************************************************************************
 * (C) 2019-2025 SAP SE or an SAP affiliate company. All rights reserved. *
 **************************************************************************/
package com.sap.cds.feature.attachments.service.malware.client;

import java.net.URI;
import java.util.Map;

import org.apache.http.client.HttpClient;

import com.sap.cds.feature.attachments.service.malware.DefaultAttachmentMalwareScanner;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpClientFactory;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpClientFactory.DefaultHttpClientFactoryBuilder;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpDestination;
import com.sap.cloud.sdk.cloudplatform.security.BasicCredentials;

/**
 * The default factory for creating a {@link HttpClient} for the Malware Scan Service.
 */
public final class MalwareScanClientProviderFactory implements HttpClientProviderFactory {

	private final HttpClient httpClient;

	/**
	 * Creates a new instance of {@link MalwareScanClientProviderFactory}.
	 *
	 * @param binding       the required {@link ServiceBinding} to the Malware Scan Service
	 * @param configuration the required {@link ConnectionPool} configuration
	 */
	public MalwareScanClientProviderFactory(ServiceBinding binding, ConnectionPool configuration) {
		Map<String, Object> credentials = binding.getCredentials();

		BasicCredentials basic = new BasicCredentials((String) credentials.get("username"),
				(String) credentials.get("password"));

		String url = (String) credentials.get("url");
		URI serviceUrl = URI.create(url + "/scan").normalize();
		DefaultHttpDestination destination = DefaultHttpDestination.builder(serviceUrl)
				.name(DefaultAttachmentMalwareScanner.MALWARE_SCAN_SERVICE_LABEL).basicCredentials(basic).build();

		DefaultHttpClientFactoryBuilder builder = DefaultHttpClientFactory.builder();
		builder.timeoutMilliseconds((int) configuration.getTimeout().toMillis());
		builder.maxConnectionsPerRoute(configuration.getMaxConnectionsPerRoute());
		builder.maxConnectionsTotal(configuration.getMaxConnections());
		DefaultHttpClientFactory factory = builder.build();

		this.httpClient = factory.createHttpClient(destination);
	}

	@Override
	public HttpClient getHttpClient() {
		return this.httpClient;
	}

}
