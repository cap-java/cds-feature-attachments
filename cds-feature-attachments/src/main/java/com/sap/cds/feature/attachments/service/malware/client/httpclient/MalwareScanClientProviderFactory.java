/**************************************************************************
 * (C) 2019-2024 SAP SE or an SAP affiliate company. All rights reserved. *
 **************************************************************************/
package com.sap.cds.feature.attachments.service.malware.client.httpclient;

import java.net.URI;
import java.util.Objects;

import org.apache.http.client.HttpClient;

import com.sap.cds.feature.attachments.service.malware.constants.MalwareScanConstants;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpClientFactory;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpClientFactory.DefaultHttpClientFactoryBuilder;
import com.sap.cloud.sdk.cloudplatform.connectivity.DefaultHttpDestination;
import com.sap.cloud.sdk.cloudplatform.security.BasicCredentials;

/**
 * The default factory for creating a {@link HttpClient} for the malware scan service.
 */
public final class MalwareScanClientProviderFactory implements HttpClientProviderFactory {

	private static final String SCAN_ENDPOINT = "/scan";
	private static final String VALUE_URL = "url";
	private static final String VALUE_USERNAME = "username";
	private static final String VALUE_PASSWORD = "password";

	private final HttpClient httpClient;

	public MalwareScanClientProviderFactory(ServiceBinding binding, ConnectionPool connectionPoolConfig) {
		if (Objects.isNull(binding)) {
			this.httpClient = null;
		} else {
			var credentials = binding.getCredentials();
			var url = (String) credentials.get(VALUE_URL);
			var serviceUrl = URI.create(url + SCAN_ENDPOINT).normalize();
			var basic = new BasicCredentials((String) credentials.get(VALUE_USERNAME), (String) credentials.get(VALUE_PASSWORD));
			var destination = DefaultHttpDestination.builder(serviceUrl).name(MalwareScanConstants.MALWARE_SCAN_SERVICE_LABEL)
					.basicCredentials(basic).build();
			
			DefaultHttpClientFactoryBuilder builder = DefaultHttpClientFactory.builder();
			builder.timeoutMilliseconds((int)connectionPoolConfig.getTimeout().toMillis());
			builder.maxConnectionsPerRoute(connectionPoolConfig.getMaxConnectionsPerRoute());
			builder.maxConnectionsTotal(connectionPoolConfig.getMaxConnections());
			DefaultHttpClientFactory factory = builder.build();

			this.httpClient = factory.createHttpClient(destination);
		}
	}

	@Override
	public HttpClient getHttpClient() {
		return this.httpClient;
	}

	@Override
	public boolean isServiceBound() {
		return this.httpClient != null;
	}
}
