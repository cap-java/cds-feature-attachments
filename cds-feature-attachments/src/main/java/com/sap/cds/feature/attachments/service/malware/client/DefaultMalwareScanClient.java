/**************************************************************************
 * (C) 2019-2025 SAP SE or an SAP affiliate company. All rights reserved. *
 **************************************************************************/
package com.sap.cds.feature.attachments.service.malware.client;

import static java.util.Objects.requireNonNull;

import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sap.cds.services.ServiceException;

/**
 * Default implementation of the {@link MalwareScanClient} interface. The given {@link InputStream} is scanned by using
 * the Malware Scan Service. The result of the scan is returned with status {@link MalwareScanResultStatus}.
 */
public class DefaultMalwareScanClient implements MalwareScanClient {

	private static final Logger logger = LoggerFactory.getLogger(DefaultMalwareScanClient.class);

	private static final String JSON_CONTENT = "application/json";

	private final ObjectMapper mapper = buildObjectMapper();

	private final HttpClientProvider clientProvider;

	/**
	 * Constructs a new instance of {@link DefaultMalwareScanClient}.
	 *
	 * @param clientProvider the required {@link HttpClientProvider} to create the HTTP client to access
	 *                       the Malware Scan Service.
	 *
	 * @throws NullPointerException if the {@code clientProviderFactory} is {@code null}.
	 */
	public DefaultMalwareScanClient(HttpClientProvider clientProvider) {
		this.clientProvider = requireNonNull(clientProvider, "clientProvider must not be null");
	}

	@Override
	public MalwareScanResultStatus scanContent(InputStream content) {
		logger.debug("Start scanning document");
		HttpPost request = buildHttpRequest(content);
		return executeRequest(request);
	}

	private MalwareScanResultStatus executeRequest(HttpPost request) {
		HttpClient httpClient = clientProvider.getHttpClient();
		try (CloseableHttpResponse response = (CloseableHttpResponse) httpClient.execute(request)) {
			MalwareScanResult malwareScanResult = convertHttpResponseToJavaObject(response);
			return mapResponseToStatus(malwareScanResult);
		} catch (IOException e) {
			throw new ServiceException(e);
		}
	}

	private MalwareScanResult convertHttpResponseToJavaObject(CloseableHttpResponse response) throws IOException {
		int code = response.getStatusLine().getStatusCode();

		logger.debug("Server responded with status code '{}'", code);

		if (code >= 200 && code <= 207) {
			String contentType = JSON_CONTENT;
			if (response.getEntity() != null) {
				if (Objects.nonNull(response.getEntity().getContentType())) {
					contentType = response.getEntity().getContentType().getValue();
				}
				if (contentType.contains(JSON_CONTENT)) {
					String jsonData = EntityUtils.toString(response.getEntity());
					return mapper.readValue(jsonData, MalwareScanResult.class);
				} else {
					throw new IOException("Unexpected response format: Expected JSON but found '" + contentType + "'");
				}
			} else {
				return mapper.readValue("{}", MalwareScanResult.class);
			}
		} else {
			String reason = response.getStatusLine().getReasonPhrase();
			throw new IOException("Unexpected request HTTP response (" + code + ") " + reason);
		}
	}

	private static MalwareScanResultStatus mapResponseToStatus(MalwareScanResult scanResult) {
		if (scanResult.isMalwareDetected() || scanResult.isEncryptedContentDetected()) {
			logger.warn(
					"Document is infected with malware, response status from scan was: malwareDetected = {}, encryptedContentDetected = {}",
					scanResult.isMalwareDetected(), scanResult.isEncryptedContentDetected());
			return MalwareScanResultStatus.INFECTED;
		} else {
			return MalwareScanResultStatus.CLEAN;
		}
	}

	private static HttpPost buildHttpRequest(InputStream content) {
		InputStreamEntity reqEntity = new InputStreamEntity(content, -1);
		reqEntity.setContentType("binary/octet-stream");
		reqEntity.setChunked(true);

		HttpPost request = new HttpPost();
		request.setEntity(reqEntity);
		return request;
	}

	private static ObjectMapper buildObjectMapper() {
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		return mapper;
	}

}
