/*
 * Â© 2024-2025 SAP SE or an SAP affiliate company. All rights reserved.
 */
package com.sap.cds.feature.attachments.service.handler.transaction;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.cds.feature.attachments.service.malware.AsyncMalwareScanExecutor;
import com.sap.cds.feature.attachments.service.malware.AttachmentMalwareScanner;
import com.sap.cds.reflect.CdsEntity;
import com.sap.cds.services.changeset.ChangeSetListener;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cds.services.runtime.RequestContextRunner;

/**
 * This record is responsible for starting the malware scan asynchronously after the transaction is completed. Therefore
 * it implements the {@link ChangeSetListener} and {@link AsyncMalwareScanExecutor} interfaces.
 * 
 * @param attachmentEntity         The attachment entity to be scanned
 * @param contentId                The content ID of the attachment
 * @param attachmentMalwareScanner The attachment malware scanner to be used for scanning
 * @param runtime                  The runtime instance to be used for creating the request context
 */
public record EndTransactionMalwareScanRunner(CdsEntity attachmentEntity, String contentId,
		AttachmentMalwareScanner attachmentMalwareScanner, CdsRuntime runtime)
		implements ChangeSetListener, AsyncMalwareScanExecutor {

	private static final Logger logger = LoggerFactory.getLogger(EndTransactionMalwareScanRunner.class);

	@Override
	public void afterClose(boolean completed) {
		if (completed) {
			startScanning(attachmentEntity, contentId);
		}
	}

	@Override
	public void scanAsync(CdsEntity attachmentEntity, String contentId) {
		startScanning(attachmentEntity, contentId);
	}

	private void startScanning(CdsEntity attachmentEntityToScan, String contentId) {
		// get current request context
		RequestContextRunner runner = runtime.requestContext();

		logger.debug("Transaction completed. Starting to scan attachment {} in entity {} asynchronously.", contentId,
				attachmentEntityToScan.getQualifiedName());
		Supplier<Void> executeAdapterSupplier = () -> {
			// run malware scan asynchronously with current request context
			runner.run(resourceCtx -> {
				// ensure that DB transaction is still active until the content is completely read from InputStream and
				// scanned by malware scanner
				runtime.changeSetContext().run(changeSetCtx -> {
					logger.debug("Started asynchronously scan of attachment {} in entity {}.", contentId,
							attachmentEntityToScan.getQualifiedName());
					attachmentMalwareScanner.scanAttachment(attachmentEntityToScan, contentId);
				});
			});
			return null;
		};
		CompletableFuture.supplyAsync(executeAdapterSupplier).whenComplete((result, exception) -> {
			if (Objects.nonNull(exception)) {
				logger.error("Error scanning attachment {} in entity {}.", contentId,
						attachmentEntityToScan.getQualifiedName(), exception);
			} else {
				logger.debug("Scanning of attachment {} in entity {} was completed successfully.", contentId,
						attachmentEntityToScan.getQualifiedName());
			}
		});
	}

}
