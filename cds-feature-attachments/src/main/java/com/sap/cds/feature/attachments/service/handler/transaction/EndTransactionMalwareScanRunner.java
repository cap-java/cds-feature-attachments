/**************************************************************************
 * (C) 2019-2024 SAP SE or an SAP affiliate company. All rights reserved. *
 **************************************************************************/
package com.sap.cds.feature.attachments.service.handler.transaction;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.cds.feature.attachments.service.malware.AsyncMalwareScanExecutor;
import com.sap.cds.feature.attachments.service.malware.AttachmentMalwareScanner;
import com.sap.cds.reflect.CdsEntity;
import com.sap.cds.services.changeset.ChangeSetListener;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cds.services.runtime.RequestContextRunner;

/**
 * This record is responsible for starting the malware scan asynchronously after the transaction is completed. Therefore
 * it implements the {@link ChangeSetListener} and {@link AsyncMalwareScanExecutor} interfaces.
 */
public record EndTransactionMalwareScanRunner(CdsEntity attachmentEntity, String contentId,
		AttachmentMalwareScanner attachmentMalwareScanner, CdsRuntime runtime)
		implements ChangeSetListener, AsyncMalwareScanExecutor {

	private static final Logger logger = LoggerFactory.getLogger(EndTransactionMalwareScanRunner.class);

	@Override
	public void afterClose(boolean completed) {
		if (completed) {
			startScanning(attachmentEntity, contentId);
		}
	}

	@Override
	public void scanAsync(CdsEntity attachmentEntity, String contentId) {
		startScanning(attachmentEntity, contentId);
	}

	private void startScanning(CdsEntity attachmentEntityToScan, String contentId) {
		// get current request context
		RequestContextRunner runner = runtime.requestContext();

		logger.debug("Transaction completed. Starting to scan attachment asynchronously.");
		Supplier<Void> executeAdapterSupplier = () -> {
			// run malware scan asynchronously with current request context
			runner.run(context -> {
				logger.info("Starting to scan attachment");
				attachmentMalwareScanner.scanAttachment(attachmentEntityToScan, contentId);
			});
			return null;
		};
		CompletableFuture.supplyAsync(executeAdapterSupplier).whenComplete((result, exception) -> {
			if (Objects.nonNull(exception)) {
				logger.error("Error during scanning attachment", exception);
			} else {
				logger.info("Scanning attachment completed.");
			}
		});
	}

}
