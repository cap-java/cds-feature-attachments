package com.sap.cds.feature.attachments.service.malware.client;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.sap.cds.services.environment.CdsProperties;
import com.sap.cds.services.environment.CdsProperties.ConnectionPool;
import com.sap.cds.services.request.UserInfo;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cloud.environment.servicebinding.api.ServiceBinding;

class MalwareScanClientProviderTest {
	private MalwareScanClientProvider cut;
	private ServiceBinding binding;
	private CdsRuntime runtime;
	private ConnectionPool connectionPoolConfig;

	@BeforeEach
	void setup() {
		binding = mock(ServiceBinding.class);
		runtime = mock(CdsRuntime.class);
		connectionPoolConfig = mock(ConnectionPool.class);
	}

	@Test
	void clientProviderReturned() {
		mockInput();
		var userInfo = mock(UserInfo.class);
		when(runtime.getProvidedUserInfo()).thenReturn(userInfo);
		when(connectionPoolConfig.getMaxConnections()).thenReturn(10);
		when(connectionPoolConfig.getMaxConnectionsPerRoute()).thenReturn(1);

		cut = new MalwareScanClientProvider(binding, connectionPoolConfig);

		var client = cut.getHttpClient();
		assertNotNull(client);
	}

	private void mockInput() {
		Map<String, Object> credentials = Map.of("username", "name", "password", "pass", "url", "http://localhost:8080");
		when(binding.getCredentials()).thenReturn(credentials);
		var enabled = mock(CdsProperties.Enabled.class);
		when(connectionPoolConfig.getCombinePools()).thenReturn(enabled);
		when(connectionPoolConfig.getMaxConnections()).thenReturn(20);
		when(connectionPoolConfig.getMaxConnectionsPerRoute()).thenReturn(20);
	}
}
