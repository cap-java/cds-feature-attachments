package com.sap.cds.feature.attachments.service.malware.client.mapper;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.junit.jupiter.params.provider.EnumSource.Mode;

import com.sap.cds.feature.attachments.generated.cds4j.sap.attachments.StatusCode;
import com.sap.cds.feature.attachments.service.malware.client.model.MalwareScanResultStatus;

class DefaultMalwareClientStatusMapperTest {

	private MalwareClientStatusMapper cut;

	@BeforeEach
	void setup() {
		cut = new MalwareClientStatusMapper();
	}

	@Test
	void mapCleanStatus() {
		assertThat(cut.mapStatus(MalwareScanResultStatus.CLEAN)).isEqualTo(StatusCode.CLEAN);
		assertThat(cut.mapStatus(MalwareScanResultStatus.NO_SCANNER)).isEqualTo(StatusCode.CLEAN);
	}

	@Test
	void mapInfectedStatus() {
		assertThat(cut.mapStatus(MalwareScanResultStatus.INFECTED)).isEqualTo(StatusCode.INFECTED);
		assertThat(cut.mapStatus(MalwareScanResultStatus.ENCRYPTED)).isEqualTo(StatusCode.INFECTED);
	}

	@ParameterizedTest
	@EnumSource(value = MalwareScanResultStatus.class, mode = Mode.EXCLUDE, names = {"CLEAN", "NO_SCANNER", "INFECTED", "ENCRYPTED"})
	void mapFailedStatus(MalwareScanResultStatus status) {
		assertThat(cut.mapStatus(status)).isEqualTo(StatusCode.FAILED);
	}

}
