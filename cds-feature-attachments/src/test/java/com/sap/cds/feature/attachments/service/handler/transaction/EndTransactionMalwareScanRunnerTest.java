package com.sap.cds.feature.attachments.service.handler.transaction;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.when;

import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;

import org.awaitility.Awaitility;
import org.awaitility.core.ConditionTimeoutException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.sap.cds.feature.attachments.helper.LogObserver;
import com.sap.cds.feature.attachments.service.malware.AttachmentMalwareScanner;
import com.sap.cds.reflect.CdsEntity;
import com.sap.cds.services.request.RequestContext;
import com.sap.cds.services.runtime.CdsRuntime;
import com.sap.cds.services.runtime.RequestContextRunner;

import ch.qos.logback.classic.Level;

class EndTransactionMalwareScanRunnerTest {

	private EndTransactionMalwareScanRunner cut;
	private CdsEntity attachmentEntity;
	private String contentId;
	private AttachmentMalwareScanner attachmentMalwareScanner;
	private LogObserver observer;

	@BeforeEach
	void setup() {
		RequestContextRunner runner = mock(RequestContextRunner.class);
		CdsRuntime runtime = mock(CdsRuntime.class);
		when(runtime.requestContext()).thenReturn(runner);
		doAnswer(invocation -> {
			Consumer<RequestContext> consumer = invocation.getArgument(0);
			consumer.accept(mock(RequestContext.class));
			return null;
		}).when(runner).run(any(Consumer.class));

		attachmentEntity = mock(CdsEntity.class);
		contentId = UUID.randomUUID().toString();
		attachmentMalwareScanner = mock(AttachmentMalwareScanner.class);
		cut = new EndTransactionMalwareScanRunner(attachmentEntity, contentId, attachmentMalwareScanner, runtime);
		observer = LogObserver.create(cut.getClass().getName());
	}

	@AfterEach
	void tearDown() {
		observer.stop();
	}

	@Test
	void notCompletedTransactionDoNothing() {
		var executionDone = new AtomicBoolean();
		doAnswer((invocation) -> {
			executionDone.set(true);
			return null;
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);

		cut.afterClose(false);

		try {
			Awaitility.await().atMost(101, TimeUnit.MILLISECONDS).until(executionDone::get);
		} catch (ConditionTimeoutException ignored) {
			// expected
		}
		verifyNoInteractions(attachmentMalwareScanner);
	}

	@Test
	void completedTransactionScanAttachments() {
		var executionDone = new AtomicBoolean();
		var usedThread = new AtomicReference<String>();
		doAnswer((invocation) -> {
			executionDone.set(true);
			usedThread.set(Thread.currentThread().getName());
			return null;
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);

		cut.afterClose(true);

		Awaitility.await().until(executionDone::get);
		verify(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);
		assertThat(usedThread.get()).isNotEmpty().isNotEqualTo(Thread.currentThread().getName());
	}

	@Test
	void exceptionDuringScanningLogged() {
		doAnswer((invocation) -> {
			throw new RuntimeException("Some exception");
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);
		observer.start();

		cut.afterClose(true);

		verifyLogIsWritten();
	}

	@Test
	void directScanCallScanAttachments() {
		var executionDone = new AtomicBoolean();
		var usedThread = new AtomicReference<String>();
		doAnswer((invocation) -> {
			executionDone.set(true);
			usedThread.set(Thread.currentThread().getName());
			return null;
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);

		cut.scanAsync(attachmentEntity, contentId);

		Awaitility.await().until(executionDone::get);
		verify(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);
		assertThat(usedThread.get()).isNotEmpty().isNotEqualTo(Thread.currentThread().getName());
	}

	@Test
	void exceptionDuringScanningLoggedForDirectScanCall() {
		doAnswer((invocation) -> {
			throw new RuntimeException("Some exception");
		}).when(attachmentMalwareScanner).scanAttachment(attachmentEntity, contentId);
		observer.start();

		cut.scanAsync(attachmentEntity, contentId);

		verifyLogIsWritten();
	}

	private void verifyLogIsWritten() {
		Awaitility.await().atMost(1, TimeUnit.SECONDS).until(() -> {
			var errorList = observer.getLogEvents().stream().filter(event -> event.getLevel().equals(Level.ERROR)).toList();
			return !errorList.isEmpty();
		});
		observer.stop();
		var errorList = observer.getLogEvents().stream().filter(event -> event.getLevel().equals(Level.ERROR)).toList();
		assertThat(errorList).hasSize(1);
		assertThat(errorList.get(0).getFormattedMessage()).contains("Error during scanning attachment");
	}

}
