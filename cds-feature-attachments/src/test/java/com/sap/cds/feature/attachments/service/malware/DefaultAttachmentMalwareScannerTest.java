package com.sap.cds.feature.attachments.service.malware;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.when;

import java.io.InputStream;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.mockito.ArgumentCaptor;

import com.sap.cds.Result;
import com.sap.cds.feature.attachments.generated.cds4j.sap.attachments.Attachments;
import com.sap.cds.feature.attachments.generated.cds4j.sap.attachments.StatusCode;
import com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.Attachment_;
import com.sap.cds.feature.attachments.handler.helper.RuntimeHelper;
import com.sap.cds.feature.attachments.service.AttachmentService;
import com.sap.cds.feature.attachments.service.malware.client.MalwareScanClient;
import com.sap.cds.feature.attachments.service.malware.client.MalwareScanResultStatus;
import com.sap.cds.ql.cqn.CqnSelect;
import com.sap.cds.ql.cqn.CqnUpdate;
import com.sap.cds.services.ServiceException;
import com.sap.cds.services.persistence.PersistenceService;
import com.sap.cds.services.runtime.CdsRuntime;

class DefaultAttachmentMalwareScannerTest {

	private static CdsRuntime runtime;

	private DefaultAttachmentMalwareScanner cut;
	private PersistenceService persistenceService;
	private AttachmentService attachmentService;
	private MalwareScanClient malwareScanClient;
	private Result result;
	private ArgumentCaptor<CqnSelect> selectCaptor;
	private ArgumentCaptor<CqnUpdate> updateCaptor;

	@BeforeAll
	static void classSetup() {
		runtime = RuntimeHelper.runtime;
	}

	@BeforeEach
	void setup() {
		persistenceService = mock(PersistenceService.class);
		attachmentService = mock(AttachmentService.class);
		malwareScanClient = mock(MalwareScanClient.class);
		cut = new DefaultAttachmentMalwareScanner(persistenceService, attachmentService, malwareScanClient);

		result = mock(Result.class);
		selectCaptor = ArgumentCaptor.forClass(CqnSelect.class);
		updateCaptor = ArgumentCaptor.forClass(CqnUpdate.class);
		when(persistenceService.run(any(CqnUpdate.class))).thenReturn(mock(Result.class));
	}

	@Test
	void correctSelectForNonDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME);
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verify(persistenceService).run(selectCaptor.capture());
		var select = selectCaptor.getValue();
		assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
		verifyKeyWhereCondition(select);
	}

	@Test
	void correctSelectForDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		mockSelectResult(Attachments.create(), MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verify(persistenceService, times(2)).run(selectCaptor.capture());
		var selects = selectCaptor.getAllValues();
		assertThat(selects).hasSize(2).allSatisfy(select -> {
			assertThat(select.from().toString()).contains(entity.get().getQualifiedName());
			verifyKeyWhereCondition(select);
		});
	}

	@Test
	void fallbackToActiveEntityIfDraftHasNoData() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var emptyResult = mock(Result.class);
		when(emptyResult.rowCount()).thenReturn(0L);
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(emptyResult).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		var content = mock(InputStream.class);
		var cdsData = Attachments.create();
		cdsData.put(Attachments.CONTENT, content);
		when(result.single(Attachments.class)).thenReturn(cdsData);
		when(malwareScanClient.scanContent(any())).thenReturn(MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verify(malwareScanClient).scanContent(content);
		verify(persistenceService, times(2)).run(selectCaptor.capture());
		var selects = selectCaptor.getAllValues();
		assertThat(selects).hasSize(2);
		assertThat(selects.get(0).from().toString()).contains(entity.get().getQualifiedName() + "_drafts");
		verifyKeyWhereCondition(selects.get(0));
		assertThat(selects.get(1).from().toString()).contains(entity.get().getQualifiedName());
		verifyKeyWhereCondition(selects.get(1));
	}

	@Test
	void exceptionIfTooManyResultsAreSelected() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME).orElseThrow();
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(2L);

		assertThrows(IllegalStateException.class, () -> cut.scanAttachment(entity, ""));
	}

	@ParameterizedTest
	@EnumSource(MalwareScanResultStatus.class)
	void dataAreUpdatedWithStatus(MalwareScanResultStatus status) {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		mockSelectResult(Attachments.create(), status);

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verifyPersistenceServiceCalledCorrectlyForReadAndUpdate(status);
	}

	@Test
	void dataAreUpdatedWithStatusFromFailingScanClient() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(Attachments.class)).thenReturn(Attachments.create());
		when(malwareScanClient.scanContent(any())).thenThrow(new ServiceException("Error reading attachment"));

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verifyPersistenceServiceCalledCorrectlyForReadAndUpdate(MalwareScanResultStatus.FAILED);
	}

	@Test
	void dataAreUpdatedWithStatusFromFailingAttachmentService() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(Attachments.class)).thenReturn(Attachments.create());
		when(attachmentService.readAttachment(any())).thenThrow(new ServiceException("Error reading attachment"));

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verifyPersistenceServiceCalledCorrectlyForReadAndUpdate(MalwareScanResultStatus.FAILED);
	}

	@Test
	void contentTakenFromTheDatabaseSelect() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var content = mock(InputStream.class);
		var data = Attachments.create();
		data.put("content", content);
		mockSelectResult(data, MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), "");

		verify(malwareScanClient, times(2)).scanContent(content);
		verifyNoInteractions(attachmentService);
	}

	@Test
	void contentTakenFromTheAttachmentService() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var contentId = "contentId";
		var data = Attachments.create();
		data.put(Attachments.CONTENT_ID, contentId);
		mockSelectResult(data, MalwareScanResultStatus.CLEAN);
		var content = mock(InputStream.class);
		when(attachmentService.readAttachment(contentId)).thenReturn(content);

		cut.scanAttachment(entity.orElseThrow(), "");

		verify(attachmentService, times(2)).readAttachment(contentId);
		verify(malwareScanClient, times(2)).scanContent(content);
	}

	@Test
	void contentTakenFromTheAttachmentServiceForNonDraft() {
		var entity = runtime.getCdsModel().findEntity(Attachment_.CDS_NAME);
		var contentId = "contentId";
		var data = Attachments.create();
		data.put(Attachments.CONTENT_ID, contentId);
		mockSelectResult(data, MalwareScanResultStatus.CLEAN);
		var content = mock(InputStream.class);
		when(attachmentService.readAttachment(contentId)).thenReturn(content);

		cut.scanAttachment(entity.orElseThrow(), "");

		verify(attachmentService, times(1)).readAttachment(contentId);
		verify(malwareScanClient, times(1)).scanContent(content);
	}

	@Test
	void noDataReturnedForUpdateNothingDoneForNonDraftEntity() {
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L).thenReturn(0L);
		var originSelectionData = Attachments.create();
		originSelectionData.put(Attachments.CONTENT_ID, "first contentId");
		originSelectionData.put(Attachments.CONTENT, mock(InputStream.class));
		when(result.single(Attachments.class)).thenReturn(originSelectionData).thenReturn(Attachments.create());
		when(malwareScanClient.scanContent(any())).thenReturn(MalwareScanResultStatus.CLEAN);

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verify(persistenceService).run(updateCaptor.capture());
		var update = updateCaptor.getValue();
		assertThat(update.ref().toString()).contains(entity.get().getQualifiedName());
	}

	@Test
	void clientNotCalledIfNoInstanceBound() {
		cut = new DefaultAttachmentMalwareScanner(persistenceService, attachmentService, null);
		var entity = runtime.getCdsModel().findEntity(getTestServiceAttachmentName());
		var secondResult = mock(Result.class);
		when(secondResult.rowCount()).thenReturn(0L);
		when(secondResult.single(Attachments.class)).thenReturn(Attachments.create());
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result).thenReturn(secondResult);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(Attachments.class)).thenReturn(Attachments.create());

		cut.scanAttachment(entity.orElseThrow(), "ID");

		verifyNoInteractions(malwareScanClient);
		verify(persistenceService).run(updateCaptor.capture());
		var updateList = updateCaptor.getAllValues();
		assertThat(updateList).hasSize(1).first().satisfies(update -> {
			assertThat(update.entries()).hasSize(1);
			assertThat(update.entries().get(0)).containsEntry(Attachments.STATUS, StatusCode.CLEAN);
		});
	}

	@Test
	void mapStatus() {
		assertEquals(StatusCode.CLEAN, DefaultAttachmentMalwareScanner.mapStatus(MalwareScanResultStatus.CLEAN));
		assertEquals(StatusCode.INFECTED,DefaultAttachmentMalwareScanner.mapStatus(MalwareScanResultStatus.ENCRYPTED));
		assertEquals(StatusCode.FAILED, DefaultAttachmentMalwareScanner.mapStatus(MalwareScanResultStatus.FAILED));
		assertEquals(StatusCode.INFECTED, DefaultAttachmentMalwareScanner.mapStatus(MalwareScanResultStatus.INFECTED));
		assertEquals(StatusCode.CLEAN, DefaultAttachmentMalwareScanner.mapStatus(MalwareScanResultStatus.NO_SCANNER));
	}

	private void verifyPersistenceServiceCalledCorrectlyForReadAndUpdate(MalwareScanResultStatus expectedStatus) {
		verify(persistenceService, times(2)).run(updateCaptor.capture());
		var updateList = updateCaptor.getAllValues();
		assertThat(updateList).hasSize(2);
		updateList.forEach(update -> {
			assertThat(update.entries()).hasSize(1);
			assertThat(update.entries().get(0)).containsEntry(Attachments.STATUS, DefaultAttachmentMalwareScanner.mapStatus(expectedStatus));
			assertThat(update.entries()).anyMatch(entry -> entry.get(Attachments.SCANNED_AT) instanceof java.time.Instant);
		});
	}

	private String getTestServiceAttachmentName() {
		return com.sap.cds.feature.attachments.generated.test.cds4j.unit.test.testservice.Attachment_.CDS_NAME;
	}

	private void mockSelectResult(Attachments cdsData, MalwareScanResultStatus status) {
		when(persistenceService.run(any(CqnSelect.class))).thenReturn(result);
		when(result.rowCount()).thenReturn(1L);
		when(result.single(Attachments.class)).thenReturn(cdsData);
		when(malwareScanClient.scanContent(any())).thenReturn(status);
	}

	private void verifyKeyWhereCondition(CqnSelect select) {
		assertThat(select.where()).isPresent();
		var selectWhere = select.where().get();
		assertThat(selectWhere.toString()).contains("[{\"ref\":[\"contentId\"]},\"=\",{\"val\":\"ID\"},\"and\",{\"ref\":[\"status\"]},\"<>\",{\"val\":\"Clean\"}]");
	}

}
